// kompiluje poleceniem z Makefile

//#include <stdio.h>
#include <string>
#include <boost/regex.hpp>
#include <vector>

using namespace boost;
using namespace std;

int main()
{
    // deklaracja zmiennych
    string str;
    regex   pattern ("(\\S.*?)\\s+(-?[1-9]\\d*)\\s*");
    smatch sm;
    vector<pair<string, string> > lines; //domyślnie będzie to pewnie vector<pair<string, int> >
    int line_num = 1;
    
    // wczytanie inputu
    while (getline(cin, str))
    {
        if (regex_match(str, sm, pattern))
        {
            //TODO potrzebny kod sprawdzający czy string jest legalnym rokiem
            //     wtedy łatwo też będzie sprawdzić czy mamy doczynienia z wierszem końcowym
            lines.push_back(make_pair(sm[1], sm[2]));
            cout << ">>> " << sm[1] << " " << sm[2] << endl; //"sanity check", do usunięcia później
        }
	    else
        {
            cerr << "Error in line " << line_num << ":"  << str << endl;
        }

        line_num++;
    }

    //TODO sortowi można zapodać funkcję porównującą sortowane elementy, żeby sortował wedle naszych potrzeb
    sort(lines.begin(), lines.end()); //póki co sortuje alfabetycznie, najpierw wg. opisów, następnie według dat

    //w c++11 iterowanie po vectorze jest jeszcze prostsze jbc, ale wtedy mamy konflikt namespace'ów chyba
    for (vector<pair<string, string> >::const_iterator i = lines.begin(); i != lines.end(); i++)
        cout << (*i).first << " " << (*i).second << endl;

    return 0;
}
